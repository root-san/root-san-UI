/* tslint:disable */
/* eslint-disable */
/**
 * root-san API
 * 割り勘アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventType } from './EventType';
import {
    EventTypeFromJSON,
    EventTypeFromJSONTyped,
    EventTypeToJSON,
} from './EventType';
import type { Txn } from './Txn';
import {
    TxnFromJSON,
    TxnFromJSONTyped,
    TxnToJSON,
} from './Txn';

/**
 * 
 * @export
 * @interface EventRequestBody
 */
export interface EventRequestBody {
    /**
     * 
     * @type {string}
     * @memberof EventRequestBody
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EventRequestBody
     */
    name: string;
    /**
     * 
     * @type {EventType}
     * @memberof EventRequestBody
     */
    eventType: EventType;
    /**
     * 支払い合計金額
     * @type {number}
     * @memberof EventRequestBody
     */
    amount: number;
    /**
     * イベント発生日時
     * @type {Date}
     * @memberof EventRequestBody
     */
    eventAt: Date;
    /**
     * そのイベント内における人同士のお金のやり取り
     * @type {Array<Txn>}
     * @memberof EventRequestBody
     */
    txns: Array<Txn>;
}

/**
 * Check if a given object implements the EventRequestBody interface.
 */
export function instanceOfEventRequestBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "eventType" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "eventAt" in value;
    isInstance = isInstance && "txns" in value;

    return isInstance;
}

export function EventRequestBodyFromJSON(json: any): EventRequestBody {
    return EventRequestBodyFromJSONTyped(json, false);
}

export function EventRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'eventType': EventTypeFromJSON(json['eventType']),
        'amount': json['amount'],
        'eventAt': (new Date(json['eventAt'])),
        'txns': ((json['txns'] as Array<any>).map(TxnFromJSON)),
    };
}

export function EventRequestBodyToJSON(value?: EventRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'eventType': EventTypeToJSON(value.eventType),
        'amount': value.amount,
        'eventAt': (value.eventAt.toISOString()),
        'txns': ((value.txns as Array<any>).map(TxnToJSON)),
    };
}

